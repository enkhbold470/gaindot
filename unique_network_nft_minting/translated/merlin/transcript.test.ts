import {describe, test, expect} from 'vitest'
import {Transcript} from './transcript'
import {b} from '../templateLiteralFunctions'

const initialState = {
  state: Uint8Array.from([156, 127, 91, 234, 138, 145, 60, 180, 10, 209, 13, 13, 101, 100, 39, 7, 179, 97, 106, 47, 48, 101, 43, 246, 115, 59, 228, 32, 133, 9, 198, 8, 243, 111, 26, 65, 18, 97, 138, 125, 238, 74, 119, 34, 1, 238, 19, 148, 34, 111, 74, 252, 182, 45, 51, 18, 147, 204, 146, 232, 166, 36, 172, 246, 225, 182, 0, 149, 227, 34, 187, 251, 200, 69, 229, 178, 105, 149, 254, 125, 124, 132, 19, 116, 209, 255, 88, 152, 201, 46, 224, 99, 107, 6, 114, 115, 33, 201, 42, 96, 57, 7, 3, 83, 73, 204, 187, 27, 146, 183, 176, 5, 126, 143, 168, 127, 206, 188, 126, 136, 101, 111, 203, 69, 174, 4, 188, 52, 202, 190, 174, 190, 121, 217, 23, 80, 192, 232, 191, 19, 185, 102, 80, 77, 19, 67, 89, 114, 101, 221, 136, 101, 173, 249, 20, 9, 204, 155, 32, 213, 244, 116, 68, 4, 31, 151, 182, 153, 221, 251, 222, 233, 30, 168, 123, 208, 155, 248, 176, 45, 167, 90, 150, 233, 71, 240, 127, 91, 101, 187, 78, 110, 254, 250, 161, 106, 191, 217, 251, 246]),
  pos: 41,
  pos_begin: 27,
  cur_flags: 2,
}

const transcriptChallengeBytes = new Uint8Array([213, 162, 25, 114, 208, 213, 254, 50, 12, 13, 38, 63, 172, 127, 255, 184, 20, 90, 166, 64, 175, 110, 155, 202, 23, 124, 3, 199, 239, 207, 6, 21])

const equivalentComplexChallenges = {
  0: Uint8Array.from([182, 26, 85, 64, 195, 220, 22, 229, 215, 70, 194, 46, 11, 253, 53, 9, 98, 30, 55, 224, 136, 161, 68, 85, 129, 129, 58, 116, 110, 156, 18, 234]),
  1: Uint8Array.from([198, 108, 19, 209, 95, 244, 91, 83, 24, 238, 44, 239, 153, 211, 235, 131, 70, 235, 3, 116, 104, 9, 14, 227, 37, 105, 113, 70, 23, 198, 108, 120]),
  2: Uint8Array.from([202, 177, 119, 84, 68, 106, 171, 174, 233, 185, 98, 0, 108, 133, 69, 127, 214, 30, 225, 199, 14, 231, 90, 111, 146, 219, 67, 11, 180, 196, 74, 125]),
  3: Uint8Array.from([21, 160, 217, 83, 173, 241, 181, 90, 210, 222, 254, 102, 73, 85, 134, 98, 0, 186, 44, 251, 60, 29, 2, 32, 158, 253, 99, 105, 27, 7, 226, 62]),
  4: Uint8Array.from([183, 89, 138, 214, 149, 171, 241, 184, 104, 35, 1, 209, 61, 58, 18, 8, 84, 124, 121, 205, 0, 216, 253, 92, 120, 23, 189, 155, 238, 163, 6, 208]),
  5: Uint8Array.from([59, 85, 24, 239, 252, 168, 226, 121, 66, 66, 90, 141, 2, 114, 35, 218, 76, 43, 134, 34, 111, 36, 127, 76, 234, 45, 240, 31, 113, 83, 188, 154]),
  6: Uint8Array.from([164, 150, 67, 25, 102, 29, 213, 34, 242, 249, 189, 103, 110, 28, 151, 92, 160, 0, 74, 87, 223, 146, 252, 93, 202, 254, 144, 209, 205, 25, 171, 75]),
  7: Uint8Array.from([153, 7, 235, 184, 12, 44, 134, 92, 130, 194, 22, 66, 237, 122, 57, 26, 43, 253, 87, 81, 6, 71, 176, 115, 170, 166, 189, 14, 80, 180, 137, 65]),
  8: Uint8Array.from([157, 232, 67, 134, 75, 164, 235, 75, 219, 156, 177, 124, 128, 129, 65, 140, 79, 166, 210, 80, 87, 110, 107, 225, 156, 164, 97, 60, 5, 44, 230, 145]),
  9: Uint8Array.from([102, 55, 113, 222, 201, 95, 15, 77, 247, 53, 173, 121, 194, 10, 219, 85, 152, 96, 26, 126, 195, 217, 109, 57, 186, 107, 232, 214, 171, 193, 155, 204]),
  10: Uint8Array.from([75, 59, 43, 134, 70, 121, 26, 91, 173, 173, 129, 178, 119, 178, 97, 245, 201, 36, 3, 253, 112, 253, 228, 243, 9, 188, 11, 22, 245, 30, 107, 171]),
  11: Uint8Array.from([162, 1, 164, 112, 244, 16, 56, 21, 74, 125, 29, 48, 197, 33, 141, 225, 238, 196, 65, 132, 26, 93, 31, 124, 86, 44, 21, 252, 49, 234, 39, 70]),
  12: Uint8Array.from([154, 95, 89, 14, 36, 148, 198, 13, 179, 213, 233, 86, 254, 10, 193, 224, 113, 80, 189, 208, 194, 32, 246, 38, 26, 162, 208, 36, 132, 145, 20, 54]),
  13: Uint8Array.from([216, 41, 177, 255, 238, 180, 32, 74, 177, 210, 239, 126, 115, 55, 192, 56, 43, 60, 62, 223, 16, 228, 249, 64, 115, 205, 29, 120, 44, 57, 190, 4]),
  14: Uint8Array.from([137, 20, 144, 115, 25, 48, 84, 103, 13, 253, 174, 115, 235, 54, 105, 189, 222, 73, 117, 151, 225, 225, 145, 106, 97, 138, 115, 37, 232, 23, 82, 24]),
  15: Uint8Array.from([50, 53, 178, 227, 33, 151, 78, 155, 225, 91, 45, 111, 90, 115, 212, 198, 5, 163, 204, 104, 31, 236, 19, 171, 35, 39, 210, 235, 224, 186, 254, 50]),
  16: Uint8Array.from([11, 190, 153, 75, 159, 14, 154, 149, 166, 70, 166, 125, 87, 45, 82, 161, 20, 49, 105, 44, 98, 68, 219, 142, 208, 25, 124, 217, 17, 167, 55, 155]),
  17: Uint8Array.from([246, 162, 184, 209, 116, 255, 25, 42, 34, 189, 111, 94, 212, 151, 58, 140, 134, 57, 138, 111, 95, 12, 31, 7, 161, 44, 112, 252, 142, 186, 126, 53]),
  18: Uint8Array.from([147, 236, 141, 141, 51, 192, 213, 166, 124, 87, 177, 102, 50, 69, 190, 11, 6, 81, 120, 70, 1, 128, 179, 144, 231, 195, 243, 198, 87, 6, 10, 171]),
  19: Uint8Array.from([253, 94, 196, 121, 101, 242, 124, 165, 222, 203, 34, 117, 234, 58, 39, 155, 201, 185, 20, 139, 29, 85, 182, 109, 101, 129, 56, 8, 188, 50, 234, 131]),
  20: Uint8Array.from([163, 219, 255, 178, 196, 156, 154, 2, 255, 89, 186, 255, 1, 63, 148, 96, 85, 17, 24, 22, 121, 200, 166, 167, 161, 153, 111, 8, 177, 236, 44, 131]),
  21: Uint8Array.from([98, 151, 172, 242, 214, 5, 75, 35, 94, 144, 244, 66, 35, 173, 218, 171, 139, 153, 11, 114, 12, 147, 220, 25, 182, 15, 84, 0, 108, 216, 21, 33]),
  22: Uint8Array.from([214, 229, 192, 219, 16, 57, 255, 125, 40, 223, 239, 1, 53, 230, 56, 126, 61, 160, 87, 83, 154, 72, 94, 162, 156, 249, 173, 166, 41, 213, 9, 1]),
  23: Uint8Array.from([22, 144, 29, 161, 227, 139, 247, 222, 142, 39, 224, 109, 27, 215, 251, 104, 68, 150, 211, 98, 17, 239, 22, 152, 42, 253, 73, 141, 184, 239, 25, 200]),
  24: Uint8Array.from([124, 134, 236, 31, 106, 151, 136, 26, 218, 42, 242, 177, 75, 243, 3, 209, 2, 188, 113, 95, 200, 250, 104, 151, 71, 130, 36, 111, 93, 99, 98, 17]),
  25: Uint8Array.from([231, 171, 4, 2, 4, 191, 251, 115, 86, 77, 225, 41, 20, 180, 209, 131, 104, 82, 211, 118, 152, 238, 91, 239, 241, 8, 159, 161, 193, 15, 210, 242]),
  26: Uint8Array.from([241, 211, 165, 14, 207, 138, 133, 20, 237, 4, 245, 1, 16, 66, 151, 158, 254, 68, 8, 75, 141, 195, 50, 69, 101, 156, 103, 64, 13, 206, 134, 134]),
  27: Uint8Array.from([23, 44, 142, 91, 119, 198, 101, 194, 205, 159, 168, 244, 253, 148, 45, 197, 1, 55, 166, 228, 103, 24, 215, 19, 160, 240, 28, 208, 243, 2, 110, 243]),
  28: Uint8Array.from([99, 147, 223, 102, 143, 28, 22, 240, 139, 30, 180, 244, 214, 83, 38, 129, 218, 190, 32, 92, 36, 0, 249, 221, 39, 29, 215, 216, 174, 67, 231, 81]),
  29: Uint8Array.from([132, 131, 79, 136, 140, 77, 135, 228, 239, 150, 45, 191, 94, 17, 96, 156, 204, 49, 38, 167, 200, 41, 192, 179, 96, 2, 59, 17, 181, 102, 35, 124]),
  30: Uint8Array.from([163, 246, 168, 5, 111, 225, 224, 144, 160, 213, 160, 127, 35, 97, 248, 184, 4, 163, 228, 93, 245, 199, 74, 129, 232, 193, 196, 48, 238, 126, 36, 248]),
  31: Uint8Array.from([168, 201, 51, 245, 79, 174, 118, 227, 249, 190, 169, 54, 72, 193, 48, 142, 125, 250, 33, 82, 221, 81, 103, 79, 243, 202, 67, 131, 81, 207, 0, 60]),
}

const getChaChaRnd = () => Uint8Array.from([118, 184, 224, 173, 160, 241, 61, 144, 64, 93, 106, 229, 83, 134, 189, 40, 189, 210, 25, 184, 160, 141, 237, 26, 168, 54, 239, 204, 139, 119, 13, 199])

describe('Transcript', () => {
  test('init', () => {
    const transcript = new Transcript(b`test protocol`)

    expect(transcript.cloneStrobe()).toEqual(initialState)

    transcript.append_message(b`some label`, b`some data`)

    const realChallenge = new Uint8Array(32)
    transcript.challenge_bytes(b`challenge`, realChallenge)

    expect(realChallenge).toEqual(transcriptChallengeBytes)
  })

  test('equivalence_complex', () => {
    const data = new Uint8Array(1024).fill(99)

    const realTranscript = new Transcript(b`test protocol`)

    realTranscript.append_message(b`step1`, b`some data`)

    const realChallenge = new Uint8Array(32)

    for (let i = 0; i < 32; i++) {
      realTranscript.challenge_bytes(b`challenge`, realChallenge)

      expect(realChallenge).toEqual(equivalentComplexChallenges[i])

      realTranscript.append_message(b`bigdata`, data)
      realTranscript.append_message(b`challengedata`, realChallenge)
    }
  })

  test('transcript_rng_is_bound_to_transcript_and_witnesses', () => {
    // Check that the TranscriptRng is bound to the transcript and
    // the witnesses.  This is done by producing a sequence of
    // transcripts that diverge at different points and checking
    // that they produce different challenges.

    const protocolLabel = b`test TranscriptRng collisions`
    const commitment1 = b`commitment data 1`
    const commitment2 = b`commitment data 2`
    const witness1 = b`witness data 1`
    const witness2 = b`witness data 2`

    const t1 = new Transcript(protocolLabel)
    const t2 = new Transcript(protocolLabel)
    const t3 = new Transcript(protocolLabel)
    const t4 = new Transcript(protocolLabel)

    t1.append_message(b`com`, commitment1)
    t2.append_message(b`com`, commitment2)
    t3.append_message(b`com`, commitment2)
    t4.append_message(b`com`, commitment2)

    const r1 = t1.build_rng().rekey_with_witness_bytes(b`witness`, witness1).finalize(getChaChaRnd)

    expect(r1.cloneStrobe()).toEqual({
      state: Uint8Array.from([118, 184, 224, 173, 160, 241, 61, 144, 64, 93, 106, 229, 83, 134, 189, 40, 189, 210, 25, 184, 160, 141, 237, 26, 168, 54, 239, 204, 139, 119, 13, 199, 90, 183, 135, 203, 4, 238, 106, 198, 39, 187, 136, 120, 183, 5, 189, 27, 109, 144, 135, 249, 11, 6, 142, 105, 105, 58, 42, 122, 45, 193, 173, 96, 244, 93, 224, 195, 42, 49, 106, 60, 180, 101, 39, 166, 213, 168, 94, 240, 174, 140, 119, 34, 248, 118, 56, 232, 118, 250, 243, 218, 59, 200, 108, 98, 167, 240, 71, 162, 103, 74, 107, 212, 31, 11, 212, 234, 0, 158, 197, 136, 25, 96, 17, 2, 59, 17, 13, 155, 126, 194, 83, 7, 4, 71, 79, 147, 108, 53, 50, 40, 15, 104, 156, 10, 146, 185, 137, 207, 181, 251, 175, 170, 81, 56, 150, 251, 106, 109, 75, 165, 67, 89, 232, 59, 133, 96, 156, 159, 160, 100, 86, 82, 53, 228, 152, 171, 2, 94, 147, 2, 29, 44, 167, 129, 208, 63, 223, 106, 242, 190, 134, 69, 50, 108, 45, 94, 91, 126, 143, 101, 139, 211, 217, 15, 136, 238, 159, 86]),
      pos: 32,
      pos_begin: 0,
      cur_flags: 6,
    })

    const r2 = t2.build_rng().rekey_with_witness_bytes(b`witness`, witness1).finalize(getChaChaRnd)

    expect(r2.cloneStrobe()).toEqual({
      state: Uint8Array.from([118, 184, 224, 173, 160, 241, 61, 144, 64, 93, 106, 229, 83, 134, 189, 40, 189, 210, 25, 184, 160, 141, 237, 26, 168, 54, 239, 204, 139, 119, 13, 199, 12, 195, 81, 69, 160, 149, 50, 187, 79, 244, 241, 255, 51, 59, 186, 175, 179, 128, 200, 7, 77, 133, 11, 198, 250, 223, 129, 223, 94, 197, 171, 52, 113, 82, 90, 165, 157, 29, 248, 17, 243, 207, 106, 117, 95, 239, 38, 160, 73, 202, 204, 77, 128, 35, 46, 17, 148, 36, 204, 192, 64, 213, 117, 167, 88, 44, 241, 40, 202, 187, 189, 39, 237, 36, 17, 182, 11, 90, 214, 194, 21, 156, 228, 25, 104, 28, 101, 22, 88, 104, 152, 62, 70, 165, 241, 125, 126, 165, 60, 245, 200, 126, 196, 22, 26, 88, 155, 134, 109, 237, 225, 92, 16, 146, 143, 20, 129, 114, 235, 163, 252, 83, 95, 62, 122, 78, 119, 37, 24, 22, 99, 197, 106, 174, 199, 114, 200, 103, 128, 18, 6, 181, 90, 75, 115, 133, 0, 239, 45, 243, 46, 197, 72, 31, 50, 50, 150, 133, 234, 79, 70, 21, 117, 242, 57, 140, 150, 238]),
      pos: 32,
      pos_begin: 0,
      cur_flags: 6,
    })

    const r3 = t3.build_rng().rekey_with_witness_bytes(b`witness`, witness2).finalize(getChaChaRnd)

    expect(r3.cloneStrobe()).toEqual({
      state: Uint8Array.from([118, 184, 224, 173, 160, 241, 61, 144, 64, 93, 106, 229, 83, 134, 189, 40, 189, 210, 25, 184, 160, 141, 237, 26, 168, 54, 239, 204, 139, 119, 13, 199, 71, 188, 190, 22, 123, 92, 99, 155, 163, 239, 63, 186, 205, 14, 117, 48, 36, 134, 200, 17, 159, 162, 214, 61, 169, 47, 43, 7, 97, 136, 25, 209, 81, 29, 178, 117, 10, 70, 46, 208, 245, 212, 191, 171, 181, 217, 245, 179, 192, 20, 162, 99, 103, 78, 205, 252, 247, 161, 84, 77, 141, 164, 82, 140, 229, 38, 49, 196, 170, 4, 106, 17, 51, 161, 16, 143, 47, 230, 180, 10, 222, 100, 198, 196, 75, 26, 204, 246, 171, 198, 193, 4, 117, 108, 241, 90, 10, 49, 3, 91, 8, 34, 11, 193, 62, 41, 126, 145, 162, 220, 13, 247, 18, 45, 67, 33, 18, 206, 131, 150, 210, 137, 167, 150, 242, 103, 60, 166, 163, 156, 84, 226, 18, 126, 76, 142, 113, 74, 157, 160, 109, 87, 160, 248, 85, 86, 141, 134, 85, 229, 72, 161, 106, 126, 199, 45, 83, 223, 26, 179, 5, 81, 116, 211, 112, 174, 76, 25]),
      pos: 32,
      pos_begin: 0,
      cur_flags: 6,
    })

    const r4 = t4.build_rng().rekey_with_witness_bytes(b`witness`, witness2).finalize(getChaChaRnd)

    expect(r4.cloneStrobe()).toEqual({
      state: Uint8Array.from([118, 184, 224, 173, 160, 241, 61, 144, 64, 93, 106, 229, 83, 134, 189, 40, 189, 210, 25, 184, 160, 141, 237, 26, 168, 54, 239, 204, 139, 119, 13, 199, 71, 188, 190, 22, 123, 92, 99, 155, 163, 239, 63, 186, 205, 14, 117, 48, 36, 134, 200, 17, 159, 162, 214, 61, 169, 47, 43, 7, 97, 136, 25, 209, 81, 29, 178, 117, 10, 70, 46, 208, 245, 212, 191, 171, 181, 217, 245, 179, 192, 20, 162, 99, 103, 78, 205, 252, 247, 161, 84, 77, 141, 164, 82, 140, 229, 38, 49, 196, 170, 4, 106, 17, 51, 161, 16, 143, 47, 230, 180, 10, 222, 100, 198, 196, 75, 26, 204, 246, 171, 198, 193, 4, 117, 108, 241, 90, 10, 49, 3, 91, 8, 34, 11, 193, 62, 41, 126, 145, 162, 220, 13, 247, 18, 45, 67, 33, 18, 206, 131, 150, 210, 137, 167, 150, 242, 103, 60, 166, 163, 156, 84, 226, 18, 126, 76, 142, 113, 74, 157, 160, 109, 87, 160, 248, 85, 86, 141, 134, 85, 229, 72, 161, 106, 126, 199, 45, 83, 223, 26, 179, 5, 81, 116, 211, 112, 174, 76, 25]),
      pos: 32,
      pos_begin: 0,
      cur_flags: 6,
    })

    const s1AfterFill = new Uint8Array(64)
    r1.fill_bytes(s1AfterFill)
    const s1AfterFillCheck = Uint8Array.from([5, 55, 226, 113, 215, 172, 119, 111, 8, 54, 81, 118, 128, 17, 131, 115, 98, 153, 132, 70, 51, 117, 126, 84, 8, 159, 206, 83, 3, 136, 8, 218, 110, 114, 113, 150, 94, 65, 183, 56, 30, 168, 91, 251, 78, 10, 159, 197, 133, 254, 39, 247, 98, 51, 9, 18, 133, 4, 210, 199, 98, 238, 216, 107])
    expect(s1AfterFill).toEqual(s1AfterFillCheck)

    const s2AfterFill = new Uint8Array(64)
    r2.fill_bytes(s2AfterFill)
    const s2AfterFillCheck = Uint8Array.from([5, 75, 212, 87, 179, 213, 34, 208, 81, 11, 73, 80, 129, 234, 47, 231, 47, 93, 32, 7, 150, 175, 228, 127, 207, 84, 71, 152, 215, 236, 62, 229, 42, 209, 91, 64, 133, 6, 141, 206, 201, 191, 209, 143, 224, 108, 78, 92, 24, 207, 53, 105, 12, 41, 78, 90, 166, 182, 152, 149, 220, 199, 193, 225])
    expect(s2AfterFill).toEqual(s2AfterFillCheck)

    const s3AfterFill = new Uint8Array(64)
    r3.fill_bytes(s3AfterFill)
    const s3AfterFillCheck = Uint8Array.from([43, 146, 109, 134, 248, 144, 71, 212, 228, 254, 14, 10, 55, 123, 216, 66, 116, 92, 249, 32, 96, 199, 98, 245, 107, 139, 232, 165, 162, 74, 228, 92, 14, 218, 209, 80, 158, 127, 217, 160, 103, 113, 24, 99, 81, 128, 200, 248, 161, 226, 209, 17, 80, 172, 186, 50, 139, 133, 128, 106, 49, 91, 138, 103])
    expect(s3AfterFill).toEqual(s3AfterFillCheck)

    const s4AfterFill = new Uint8Array(64)
    r4.fill_bytes(s4AfterFill)
    const s4AfterFillCheck = Uint8Array.from([43, 146, 109, 134, 248, 144, 71, 212, 228, 254, 14, 10, 55, 123, 216, 66, 116, 92, 249, 32, 96, 199, 98, 245, 107, 139, 232, 165, 162, 74, 228, 92, 14, 218, 209, 80, 158, 127, 217, 160, 103, 113, 24, 99, 81, 128, 200, 248, 161, 226, 209, 17, 80, 172, 186, 50, 139, 133, 128, 106, 49, 91, 138, 103])
    expect(s4AfterFill).toEqual(s4AfterFillCheck)

    // Transcript t1 has different commitments than t2, t3, t4, so
    // it should produce distinct challenges from all of them.
    expect(s1AfterFill).not.toEqual(s2AfterFill)
    expect(s1AfterFill).not.toEqual(s3AfterFill)
    expect(s1AfterFill).not.toEqual(s4AfterFill)

    // Transcript t2 has different witness variables from t3, t4,
    // so it should produce distinct challenges from all of them.
    expect(s2AfterFill).not.toEqual(s3AfterFill)
    expect(s2AfterFill).not.toEqual(s4AfterFill)

    // Transcripts t3 and t4 have the same commitments and
    // witnesses, so they should give different challenges only
    // based on the RNG. Checking that they're equal in the
    // presence of a bad RNG checks that the different challenges
    // above aren't because the RNG is accidentally different.
    expect(s3AfterFill).toEqual(s4AfterFill)
  })
})
